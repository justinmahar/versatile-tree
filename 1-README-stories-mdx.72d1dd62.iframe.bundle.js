/*! For license information please see 1-README-stories-mdx.72d1dd62.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkversatile_tree=self.webpackChunkversatile_tree||[]).push([[836],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Ck:()=>withMDXComponents,Eh:()=>MDXContext,Iu:()=>MDXProvider,MN:()=>useMDXComponents});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./node_modules/@storybook/addon-docs/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Qb:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.Qb});__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./src/stories/core/1.README.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>_1_README_stories});__webpack_require__("./node_modules/react/index.js");var lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),blocks_dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const READMEraw_namespaceObject='<h2 align="center">\n  🌴 Versatile Tree\n</h2>\n<h3 align="center">\n  A highly versatile tree structure for JavaScript.\n</h3>\n<p align="center">\n  <a href="https://badge.fury.io/js/versatile-tree" target="_blank" rel="noopener noreferrer"><img src="https://badge.fury.io/js/versatile-tree.svg" alt="npm Version" /></a>&nbsp;\n  <a href="https://github.com/justinmahar/versatile-tree/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/GitHub-Source-success" alt="View project on GitHub" /></a>&nbsp;\n  <a href="https://github.com/justinmahar/versatile-tree/actions?query=workflow%3ADeploy" target="_blank" rel="noopener noreferrer"><img src="https://github.com/justinmahar/versatile-tree/workflows/Deploy/badge.svg" alt="Deploy Status" /></a>\n</p>\n\x3c!-- [lock:donate-badges] 🚫--------------------------------------- --\x3e\n<p align="center">\n  <a href="https://paypal.me/thejustinmahar/5"><img src="https://img.shields.io/static/v1?label=Buy%20me%20a%20coffee&message=%E2%9D%A4&logo=KoFi&color=%23fe8e86" alt="Buy me a coffee" /></a>&nbsp;<a href="https://github.com/sponsors/justinmahar" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub&color=%23fe8e86" alt="Sponsor"/></a>\n</p>\n\x3c!-- [/lock:donate-badges] ---------------------------------------🚫 --\x3e\n\n## Documentation\n\nRead the **[official documentation](https://justinmahar.github.io/versatile-tree/)**.\n\n## Overview\n\nThis library contains a highly versatile tree structure for JavaScript.\n\nThe `TreeNode` class is simple yet highly versatile: \n\n- It can store arbitrary `data` and `children` and can be constructed from an object. \n- When not at the root, it can access its siblings, children, and root, and can be searched.\n- It can be converted to an object, to JSON, and from JSON easily.\n\nSee the Quick Start section below for examples.\n\n## Demo - React-Based Tree Editor\n\nThis library can be used for applications needing a tree structure. \n\nSee below for a demo using this library to power a React-based tree editor.\n\n[👁️ View Demo - React-Based Tree Editor](https://justinmahar.github.io/react-bootstrap-tree-editor/?path=/story/stories-demo--demo)\n<p>\n <a href="https://justinmahar.github.io/react-bootstrap-tree-editor/?path=/story/stories-demo--demo"><img src="https://raw.githubusercontent.com/justinmahar/react-bootstrap-tree-editor/master/screenshots/demo.png" width="400" /></a>\n</p>\n\n### Features include:\n\n- **🌴 Tree structure in JS**\n  - Construct and use tree structures in JavaScript easily.\n- **🔁 Easy conversion to/from JSON**\n  - Easily convert the entire tree, or a subsection, to and from JSON.\n- **🎯 Node paths and selection paths**\n  - Get a path array to any node, and selection paths for instant selection of nodes.\n- **🆔 IDs are optional**\n  - Versatility is the name of the game. This tree library supports nodes without IDs!\n- **👨‍👩‍👧‍👦 Sibling support**\n  - Get left/right siblings, or add a siblings to any sub-root node. Full sibling support!\n- **🔍 Find and walk**\n  - Find nodes by ID or custom logic, and walk the tree.\n- **📄 Deep cloning**\n  - Easily deep clone the entire tree, or any tree node.\n- **🤴 Ancestor and descendent checking**\n  - Determine if any node is an ancestor or descendant of another.\n- **✨ Much more!**\n  - See the full API below!\n\n\x3c!-- [lock:donate] 🚫--------------------------------------- --\x3e\n\n## Donate \n\nIf this project helped save you time, please consider buying me a coffee, which powers my development (and life). Your support is much appreciated!\n\n<a href="https://github.com/sponsors/justinmahar"><img src="https://justinmahar.github.io/react-kindling/support/sponsor.png" alt="Sponsor via GitHub" height="35" /></a>&nbsp; <a href="https://paypal.me/thejustinmahar/5"><img src="https://justinmahar.github.io/react-kindling/support/coffee-1.png" alt="Buy me a coffee" height="35" /></a>&nbsp; <a href="https://paypal.me/thejustinmahar/15"><img src="https://justinmahar.github.io/react-kindling/support/coffee-3.png" alt="Buy me 3 coffees" height="35" /></a>&nbsp; <a href="https://paypal.me/thejustinmahar/25"><img src="https://justinmahar.github.io/react-kindling/support/coffee-5.png" alt="Buy me 5 coffees" height="35" /></a>\n\n\x3c!-- [/lock:donate] ---------------------------------------🚫 --\x3e\n\n## Table of Contents \n\n- [Documentation](#documentation)\n- [Overview](#overview)\n- [Demo - React-Based Tree Editor](#demo---react-based-tree-editor)\n  - [Features include:](#features-include)\n- [Donate](#donate)\n- [Table of Contents](#table-of-contents)\n- [Installation](#installation)\n- [Quick Start](#quick-start)\n- [TreeNode/Tree API](#treenodetree-api)\n  - [Class Functions](#class-functions)\n    - [Constructor](#constructor)\n    - [getData](#getdata)\n    - [setData](#setdata)\n    - [getChildrenPropertyName](#getchildrenpropertyname)\n    - [getOptions](#getoptions)\n    - [hasParent](#hasparent)\n    - [isRoot](#isroot)\n    - [equals](#equals)\n    - [isDescendantOf](#isdescendantof)\n    - [isAncestorOf](#isancestorof)\n    - [addChildNode](#addchildnode)\n    - [addChildData](#addchilddata)\n    - [getNodePath](#getnodepath)\n    - [getSelectionPath](#getselectionpath)\n    - [selectNode](#selectnode)\n    - [getChildren](#getchildren)\n    - [getChildCount](#getchildcount)\n    - [hasChildren](#haschildren)\n    - [getFirstChild](#getfirstchild)\n    - [getLastChild](#getlastchild)\n    - [hasChild](#haschild)\n    - [removeChild](#removechild)\n    - [removeParent](#removeparent)\n    - [getSiblings](#getsiblings)\n    - [getSiblingCount](#getsiblingcount)\n    - [isOnlyChild](#isonlychild)\n    - [getFirstSibling](#getfirstsibling)\n    - [getLastSibling](#getlastsibling)\n    - [getLeftSibling](#getleftsibling)\n    - [getRightSibling](#getrightsibling)\n    - [addSiblingNode](#addsiblingnode)\n    - [addSiblingData](#addsiblingdata)\n    - [getIndex](#getindex)\n    - [indexOfChild](#indexofchild)\n    - [indexOfSibling](#indexofsibling)\n    - [getParent](#getparent)\n    - [isParent](#isparent)\n    - [setParent](#setparent)\n    - [getRoot](#getroot)\n    - [findFirst](#findfirst)\n    - [findAll](#findall)\n    - [findById](#findbyid)\n    - [walk](#walk)\n    - [toObject](#toobject)\n    - [toJSON](#tojson)\n    - [clone](#clone)\n  - [Static Functions](#static-functions)\n    - [fromJSON](#fromjson)\n- [TypeScript](#typescript)\n- [Icon Attribution](#icon-attribution)\n- [Contributing](#contributing)\n- [⭐ Found It Helpful? Star It!](#-found-it-helpful-star-it)\n- [License](#license)\n\n## Installation\n\n```\nnpm i versatile-tree\n```\n\n## Quick Start\n\n```js\nimport { TreeNode, Tree } from \'versatile-tree\';\n\nconst tree = new Tree();\nconst node = tree.addChildData({id: 1});\nnode.addChildData({id: 2});\nnode.addSiblingData({id: 3})\n\n// Convert entire tree to JSON\nconst treeJson = node.getRoot().toJSON();\n\n// Build tree from JSON\nconst builtTree = TreeNode.fromJSON(treeJson);\n```\n\n## TreeNode/Tree API\n\nA `Tree` alias exists for `TreeNode` -- in this library, they are interchangeable.\n\n### Class Functions\n\n#### Constructor\n\n```ts\nnew TreeNode(data: Record<string, any> = {}, options: TreeNodeOptions = TreeNode.defaultTreeNodeOptions)\n```\n\nConstruct a new TreeNode using the provided data. The data can include arbitrary properties with an optional children array.\nThe default property name for the array of children is `"children"`. This can be customized via `options.childrenPropertyName`.\n\nThe constructor will recursively create TreeNodes for all children. All other properties will be stored as data for each node.\n\nFor example, given a nested object such as:\n\n```js\n{ id: 1, children: [\n    { id: 2 },\n    { id: 3, children: [\n        { id: 4 },\n        { id: 5 }\n      ]\n    }\n  ]\n}\n```\n\nIn this case, each node will have data containing the `id` property, and all children will be turned into TreeNodes themselves.\n\nTo turn the TreeNode back into an object at a later time, use `toObject()`, and to turn it into a JSON string, use `toJSON()`.\nTo construct a TreeNode from JSON, use `TreeNode.fromJSON()`.\n\n| Param     | Description                                                                                                                |\n| --------- | -------------------------------------------------------------------------------------------------------------------------- |\n| `data`    | Optional. An object containing data for the node, plus optional children with subnodes.                                    |\n| `options` | Optional (pun intended). The options for the TreeNode. Falls back on `TreeNode.defaultTreeNodeOptions` when not specified. |\n\n---\n\n#### getData\n\n```ts\ngetData()\n```\n\nReturn the data for this node, without the children property.\n\nTo get data and all descendants, including children, for this node, use `toObject()`.\n\n| Returns                                                |\n| ------------------------------------------------------ |\n| The data for this node, without the children property. |\n\n---\n\n#### setData\n\n```ts\nsetData(newData: Record<string, any>, replaceChildren = false)\n```\n\nSets the data for this node. By default, the children property is ignored. \n\nTo replace children, pass the `replaceChildren` argument value as `true`.\n\n| Param             | Description                                                                                                                                                                            |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `newData`         | The new data for this node.                                                                                                                                                            |\n| `replaceChildren` | Optional. When true, children of the node will be replaced with the children in the data. When false, the children property is ignored and only the node\'s data is set. Default false. |\n\n---\n\n#### getChildrenPropertyName\n\n```ts\ngetChildrenPropertyName()\n```\n\nReturns the property name used for children.\n\n| Returns                              |\n| ------------------------------------ |\n| The property name used for children. |\n\n---\n\n#### getOptions\n\n```ts\ngetOptions()\n```\n\nReturn the options configured for this node.\n\n| Returns                               |\n| ------------------------------------- |\n| The options configured for this node. |\n\n---\n\n#### hasParent\n\n```ts\nhasParent(): boolean\n```\n\nReturns true if this node has a parent, false otherwise.\n\nWhen a node has no parent, it is the root. You can also use `isRoot()` to check for this case.\n\n| Returns                                          |\n| ------------------------------------------------ |\n| True if this node has a parent, false otherwise. |\n\n---\n\n#### isRoot\n\n```ts\nisRoot(): boolean\n```\nReturns true if this node is the root (has no parent), false otherwise.\n\nWhen a node has a parent, it is not the root. You can also use `hasParent()` to check for this case.\n\n| Returns                                                         |\n| --------------------------------------------------------------- |\n| True if this node is the root (has no parent), false otherwise. |\n\n---\n\n#### equals\n\n```ts\nequals(node: TreeNode): boolean\n```\n\nReturns true if the provided node is equal to this node.\n\nThis operation uses the equals function provided in the TreeNode options, and uses `===` equality by default when an equals function is not specified.\n\n| Param  | Description                     |\n| ------ | ------------------------------- |\n| `node` | The node to check for equality. |\n\n| Returns                                          |\n| ------------------------------------------------ |\n| True if the provided node is equal to this node. |\n\n---\n\n#### isDescendantOf\n\n```ts\nisDescendantOf(node: TreeNode)\n```\n\nReturns true if this node is a descendant of, or below, the provided node. False otherwise.\n\n| Param  | Description        |\n| ------ | ------------------ |\n| `node` | The node to check. |\n\n| Returns                                                                             |\n| ----------------------------------------------------------------------------------- |\n| True if this node is a descendant of, or below, the provided node. False otherwise. |\n\n---\n\n#### isAncestorOf\n\n```ts\nisAncestorOf(node: TreeNode)\n```\nReturns true if this node is an ancestor of, or above, the provided node. False otherwise.\n\n| Param  | Description        |\n| ------ | ------------------ |\n| `node` | The node to check. |\n\n| Returns                                                                            |\n| ---------------------------------------------------------------------------------- |\n| True if this node is an ancestor of, or above, the provided node. False otherwise. |\n\n---\n\n#### addChildNode\n\n```ts\naddChildNode(node: TreeNode, index?: number, allowCircularReferences?: boolean)\n```\n\nAdds the provided node as a child of this node. If the provided node already has a parent, it will first be removed from its previous parent.\n\nYou can specify an optional index at which to insert the child. If no index is provided, the child will be added to the end.\n\nIn addition, if the provided node is an ancestor to this node, this node will be removed from its parent before adding the node as a child.\nThis prevents adding an ancestor as a child to create a loop, also known as a circular reference.\nYou disable this protection by setting `allowCircularReferences` to true.\n\n| Param                     | Description                                                                                           |\n| ------------------------- | ----------------------------------------------------------------------------------------------------- |\n| `node`                    | The node to add as a child.                                                                           |\n| `index`                   | Optional. The index at which to insert the child. If `undefined`, the child will be added to the end. |\n| `allowCircularReferences` | Optional. Set to `true` to allow circular references.                                                 |\n\n---\n\n#### addChildData\n\n```ts\naddChildData(data: Record<string, any> = {}, index?: number): TreeNode\n```\nCreates a TreeNode with the data provided and adds it as a child. Returns the newly created TreeNode.\n\n| Param   | Description                                                                              |\n| ------- | ---------------------------------------------------------------------------------------- |\n| `data`  | The child data. A new node will be created from this data.                               |\n| `index` | The index at which to add the child. Pass `undefined` to add to the end of the children. |\n\n| Returns                     |\n| --------------------------- |\n| The newly created TreeNode. |\n\n---\n\n#### getNodePath\n\n```ts\ngetNodePath(): TreeNode[]\n```\n\nReturns an array containing all nodes in the tree leading to this one, starting with the root.\n\n| Returns                                                                                |\n| -------------------------------------------------------------------------------------- |\n| An array containing all nodes in the tree leading to this one, starting with the root. |\n\n---\n\n#### getSelectionPath\n\n```ts\ngetSelectionPath(): number[]\n```\n\n\nReturn an array of sibling index positions of all nodes leading to this one.\nThis includes the root, which will always be the first item in the array with an index of `0`, as root siblings are prohibited.\n\nYou can then use `selectNode(selectionPath)` to select this node at a later time. This is useful if your nodes do not have an ID and you want to reselect a node\nat a later time, or if your tree is large. It is much faster than a `find()` operation.\nThe speed of selection is constant time, O(1), as you know exactly where to find the node.\n\nFor example, given a tree with the data:\n\n```js\n{ id: 1, children: [\n    { id: 2 },\n    { id: 3, children: [\n        { id: 4 },\n        { id: 5 }\n      ]\n    }\n  ]\n}\n```\n\nThe selection path for the node with `id: 4` would be:\n\n```js\n[0, 1, 0]\n```\n\nSelecting the node using this path is nearly instantaneous.\n\n| Returns                                                               |\n| --------------------------------------------------------------------- |\n| An array of sibling index positions of all nodes leading to this one. |\n\n---\n\n#### selectNode\n\n```ts\nselectNode(selectionPath: number[]): TreeNode | undefined\n```\n\nReturns the TreeNode at the provided selection path, or `undefined` if the node at the provided selection path is not found.\n\nA selection path is an array of sibling index positions of all nodes leading to the desired node.\nThis includes the root, which will always be the first item in the array with an index of `0`, as root siblings are prohibited.\n\nThis is useful if your nodes do not have an ID and you want to reselect a node\nat a later time, or if your tree is large. It is much faster than a `find()` operation.\nThe speed of selection is constant time, O(1), as you know exactly where to find the node.\n\nSee `getSelectionPath()` for more.\n\n| Param           | Description                                                                                     |\n| --------------- | ----------------------------------------------------------------------------------------------- |\n| `selectionPath` | The selection path for the TreeNode as an array of sibling indexes leading to the desired node. |\n\n| Returns                                             |\n| --------------------------------------------------- |\n| The selected TreeNode, or `undefined` if not found. |\n\n---\n\n#### getChildren\n\n```ts\ngetChildren(): TreeNode[]\n```\nReturns the children for this node.\n\n| Returns                     |\n| --------------------------- |\n| The children for this node. |\n\n---\n\n#### getChildCount\n\n```ts\ngetChildCount(): number\n```\nReturns the number of children for this node.\n\n| Returns                               |\n| ------------------------------------- |\n| The number of children for this node. |\n\n---\n\n#### hasChildren\n\n```ts\nhasChildren(): boolean\n```\nReturns true if this node has children. False otherwise.\n\n| Returns                                          |\n| ------------------------------------------------ |\n| True if this node has children. False otherwise. |\n\n---\n\n#### getFirstChild\n\n```ts\ngetFirstChild(): TreeNode | undefined\n```\n\nReturns the first child in this node\'s list of children, or `undefined` if there are no children.\n\n| Returns                                                                                   |\n| ----------------------------------------------------------------------------------------- |\n| The first child in this node\'s list of children, or `undefined` if there are no children. |\n\n---\n\n#### getLastChild\n\n```ts\ngetLastChild(): TreeNode | undefined\n```\n\nReturns the last child in this node\'s list of children, or `undefined` if there are no children.\n\n| Returns                                                                                  |\n| ---------------------------------------------------------------------------------------- |\n| The last child in this node\'s list of children, or `undefined` if there are no children. |\n\n---\n\n#### hasChild\n\n```ts\nhasChild(node: TreeNode)\n```\n\nReturns true if this node has the provided node in its direct list of children. False otherwise.\n\nYou can use `isDescendant(node)` to check for a child relationship along the entire tree hierarchy.\n\n| Param  | Description             |\n| ------ | ----------------------- |\n| `node` | The node to search for. |\n\n| Returns                                                                                  |\n| ---------------------------------------------------------------------------------------- |\n| True if this node has the provided node in its direct list of children. False otherwise. |\n\n---\n\n#### removeChild\n\n```ts\nremoveChild(node: TreeNode): boolean\n```\n\n\nRemoves the provided node from this node\'s list of children and sets the provided node\'s parent to `undefined`.\n\nReturns `true` if the node was successfully removed. Returns `false` if the node was not found.\n\n| Param  | Description         |\n| ------ | ------------------- |\n| `node` | The node to remove. |\n\n| Returns                                                  |\n| -------------------------------------------------------- |\n| True if the node was removed. False if it was not found. |\n\n---\n\n#### removeParent\n\n```ts\nremoveParent(): boolean\n```\n\n\nRemoves this node from its parent and sets this node\'s parent to `undefined`.\n\nReturns `true` if this node was successfully removed from its parent, `false` otherwise.\n\n| Returns                                                         |\n| --------------------------------------------------------------- |\n| True if this node was removed from its parent, false otherwise. |\n\n---\n\n#### getSiblings\n\n```ts\ngetSiblings(): TreeNode[]\n```\nReturns an array of all siblings for this node.\n\n| Returns                                 |\n| --------------------------------------- |\n| An array of all siblings for this node. |\n\n---\n\n#### getSiblingCount\n\n```ts\ngetSiblingCount(): number\n```\n\nReturns the number of siblings this node has including itself.\n\n| Returns                                                |\n| ------------------------------------------------------ |\n| The number of siblings this node has including itself. |\n\n---\n\n#### isOnlyChild\n\n```ts\nisOnlyChild(): boolean\n```\n\nReturns true if this node is an only child (has no other siblings), false otherwise.\n\n| Returns                                                                      |\n| ---------------------------------------------------------------------------- |\n| True if this node is an only child (has no other siblings), false otherwise. |\n\n---\n\n#### getFirstSibling\n\n```ts\ngetFirstSibling(): TreeNode\n```\n\nReturns the first sibling in this node\'s list of siblings.\n\n| Returns                                            |\n| -------------------------------------------------- |\n| The first sibling in this node\'s list of siblings. |\n\n---\n\n#### getLastSibling\n\n```ts\ngetLastSibling(): TreeNode\n```\n\nReturns the last sibling in this node\'s list of siblings.\n\n| Returns                                           |\n| ------------------------------------------------- |\n| The last sibling in this node\'s list of siblings. |\n\n---\n\n#### getLeftSibling\n\n```ts\ngetLeftSibling(): TreeNode | undefined\n```\n\nReturns the sibling to the left of this node, or `undefined` if there is none.\n\n| Returns                                                                |\n| ---------------------------------------------------------------------- |\n| The sibling to the left of this node, or `undefined` if there is none. |\n\n---\n\n#### getRightSibling\n\n```ts\ngetRightSibling(): TreeNode | undefined\n```\nReturns the sibling to the right of this node, or `undefined` if there is none.\n\n| Returns                                                                 |\n| ----------------------------------------------------------------------- |\n| The sibling to the right of this node, or `undefined` if there is none. |\n\n---\n\n#### addSiblingNode\n\n```ts\naddSiblingNode(node: TreeNode, index?: number)\n```\n\nAdds the provided node as a sibling to this node. You can specify an optional sibling index for the insertion, otherwise the sibling will be added to the end.\n\nIf you attempt to call this function at the root, an error will be thrown, as root nodes cannot have siblings.\nTo prevent this, use `isRoot()` to check if you\'re at the root.\n\n| Param   | Description                              |\n| ------- | ---------------------------------------- |\n| `node`  | The node to add as a sibling.            |\n| `index` | Optional. The index for the new sibling. |\n\n| Errors Thrown                          |\n| -------------------------------------- |\n| Throws an error if called at the root. |\n\n---\n\n#### addSiblingData\n\n```ts\naddSiblingData(data: Record<string, any> = {}, index?: number): TreeNode\n```\n\n\nCreates a TreeNode with the data provided and adds it as a sibling. Returns the newly created TreeNode.\n\nIf you attempt to call this function at the root, an error will be thrown, as root nodes cannot have siblings.\nTo prevent this, use `isRoot()` to check if you\'re at the root.\n\n| Param   | Description                                                                                |\n| ------- | ------------------------------------------------------------------------------------------ |\n| `data`  | The sibling data. A new node will be created from this data.                               |\n| `index` | The index at which to add the sibling. Pass `undefined` to add to the end of the siblings. |\n\n| Returns                     |\n| --------------------------- |\n| The newly created TreeNode. |\n\n---\n\n#### getIndex\n\n```ts\ngetIndex(): number\n```\nReturns this node\'s index among its siblings.\n\nNote: The root will always have an index of `0`.\n\n| Returns                               |\n| ------------------------------------- |\n| This node\'s index among its siblings. |\n\n---\n\n#### indexOfChild\n\n```ts\nindexOfChild(node: TreeNode): number\n```\n\nReturns the index of the provided node in this node\'s list of children, or `-1` if it is not found.\n\n| Param  | Description                                                           |\n| ------ | --------------------------------------------------------------------- |\n| `node` | The node for which to find the index in this node\'s list of children. |\n\n| Returns                                                                                     |\n| ------------------------------------------------------------------------------------------- |\n| The index of the provided node in this node\'s list of children, or `-1` if it is not found. |\n\n---\n\n#### indexOfSibling\n\n```ts\nindexOfSibling(node: TreeNode): number\n```\n\nReturns the index of the provided node in this node\'s list of siblings, or `-1` if it is not found.\n\n| Param  | Description                                                           |\n| ------ | --------------------------------------------------------------------- |\n| `node` | The node for which to find the index in this node\'s list of siblings. |\n\n| Returns                                                                                     |\n| ------------------------------------------------------------------------------------------- |\n| The index of the provided node in this node\'s list of siblings, or `-1` if it is not found. |\n\n---\n\n#### getParent\n\n```ts\ngetParent(): TreeNode | undefined\n```\nReturns the parent of this node, or `undefined` if there is none.\n\n| Returns                                                   |\n| --------------------------------------------------------- |\n| The parent of this node, or `undefined` if there is none. |\n\n---\n\n#### isParent\n\n```ts\nisParent(node: TreeNode)\n```\nReturns true if the provided node is this node\'s direct parent, false otherwise.\n\nYou can use `isAncestor(node)` to check for a parental relationship along the entire tree hierarchy.\n\n| Param  | Description        |\n| ------ | ------------------ |\n| `node` | The node to check. |\n\n| Returns                                                                  |\n| ------------------------------------------------------------------------ |\n| True if the provided node is this node\'s direct parent, false otherwise. |\n\n---\n\n#### setParent\n\n```ts\nsetParent(parent: TreeNode | undefined): void\n```\nSets the provided node as the parent of this node. If `parent` is `undefined`, this node will be removed from its parent.\n\n| Param    | Description                        |\n| -------- | ---------------------------------- |\n| `parent` | The node to set as the new parent. |\n\n---\n\n#### getRoot\n\n```ts\ngetRoot(): TreeNode\n```\n\nReturns the root node at the top of the tree hierarchy.\n\n| Returns                                         |\n| ----------------------------------------------- |\n| The root node at the top of the tree hierarchy. |\n\n---\n\n#### findFirst\n\n```ts\nfindFirst(predicate: (node: TreeNode) => boolean, rightToLeft?: boolean): TreeNode | undefined\n```\n\nSearches the tree node and its children for the first node that passes the test defined by the matcher function provided.\n\nThe found node is returned. If not found, `undefined` is returned.\n\nThe find algorithm uses [depth-first left-to-right preorder traversal](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR) by default.\nYou can pass `rightToLeft` argument as `true` to use [depth-first right-to-left preorder traversal](https://en.wikipedia.org/wiki/Tree_traversal#Reverse_pre-order,_NRL) instead.\n\n| Param         | Description                                                                                                                   |\n| ------------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `predicate`   | A function used to match the node being searched for. This function is passed a node and returns true if the node is a match. |\n| `rightToLeft` | Optional. When true, searching will traverse the tree using depth-first right-to-left preorder traversal.                     |\n\n| Returns                                      |\n| -------------------------------------------- |\n| The found node, or `undefined` if not found. |\n\n---\n\n#### findAll\n\n```ts\nfindAll(predicate: (node: TreeNode) => boolean, rightToLeft?: boolean): TreeNode[]\n```\n\nSearches the tree node and its children for all nodes that pass the test defined by the matcher function provided.\n\nThe found nodes are returned as an array of TreeNode.\n\nThe find algorithm uses [depth-first left-to-right preorder traversal](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR) by default.\nYou can pass `rightToLeft` argument as `true` to use [depth-first right-to-left preorder traversal](https://en.wikipedia.org/wiki/Tree_traversal#Reverse_pre-order,_NRL) instead.\n\n| Param         | Description                                                                                                                    |\n| ------------- | ------------------------------------------------------------------------------------------------------------------------------ |\n| `predicate`   | A function used to match the nodes being searched for. This function is passed a node and returns true if the node is a match. |\n| `rightToLeft` | Optional. When true, searching will traverse the tree using depth-first right-to-left preorder traversal.                      |\n\n| Returns                                          |\n| ------------------------------------------------ |\n| A `TreeNode[]` array containing all found nodes. |\n\n---\n\n#### findById\n\n```ts\nfindById(id: any, idPropertyName = \'id\', rightToLeft?: boolean): TreeNode | undefined\n```\n\nFinds and returns the node with the provided id (using `===` comparison), or returns `undefined` if not found.\n\nUses "id" as the property name by default, or you can provide the ID property name using\nthe `idPropertyName` argument.\n\nThe find algorithm uses [depth-first left-to-right preorder traversal](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR) by default.\nYou can pass `rightToLeft` argument as `true` to use [depth-first right-to-left preorder traversal](https://en.wikipedia.org/wiki/Tree_traversal#Reverse_pre-order,_NRL) instead.\n\n| Param            | Description                                                                                               |\n| ---------------- | --------------------------------------------------------------------------------------------------------- |\n| `id`             | The node ID to search for.                                                                                |\n| `idPropertyName` | Optional. The property name of the ID. Defaults as "id".                                                  |\n| `rightToLeft`    | Optional. When true, searching will traverse the tree using depth-first right-to-left preorder traversal. |\n\n| Returns                                                     |\n| ----------------------------------------------------------- |\n| The node with the provided id, or `undefined` if not found. |\n\n---\n\n#### walk\n\n```ts\nwalk(visit: (node: TreeNode) => boolean | void, rightToLeft?: boolean): boolean\n```\n\nWalk the tree node and its children, calling the visit function on each node.\n\nIf the visit function returns true at any point, walking is aborted.\n\nThe walk algorithm uses [depth-first left-to-right preorder traversal](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR) by default.\nYou can pass `rightToLeft` argument as `true` to use [depth-first right-to-left preorder traversal](https://en.wikipedia.org/wiki/Tree_traversal#Reverse_pre-order,_NRL) instead.\n\n| Param         | Description                                                                                                           |\n| ------------- | --------------------------------------------------------------------------------------------------------------------- |\n| `visit`       | A visit function called on every node traversed. If the visit function returns true at any point, walking is aborted. |\n| `rightToLeft` | Optional. When true, it will traverse the tree using depth-first right-to-left preorder traversal.                    |\n\n| Returns                                             |\n| --------------------------------------------------- |\n| True if the traversal was aborted, false otherwise. |\n\n---\n\n#### toObject\n\n```ts\ntoObject(): Record<string, any>\n```\n\nReturns an object containing the tree node data including all nested children.\n\nNote: Parents, if any, are not included.\n\n| Returns                                                                |\n| ---------------------------------------------------------------------- |\n| An object containing the tree node data including all nested children. |\n\n---\n\n#### toJSON\n\n```ts\ntoJSON(): string\n```\n\nReturns a JSON string of an object containing the tree node data including all nested children.\nParents, if any, are not included.\n\nThis is accomplished by stringifying the tree node\'s `toObject()` value.\nAs such, all data in the tree node must support `JSON.stringify()` or an error will be thrown.\n\n@see You can use `TreeNode.fromJSON()` to construct a tree node from the resulting JSON output.\n@see If you\'d like to clone the tree node, you can simply use `clone()` which converts to JSON and back to a TreeNode for you.\n\n| Returns                                                                                 |\n| --------------------------------------------------------------------------------------- |\n| A JSON string of an object containing the tree node data including all nested children. |\n\n| Errors Thrown                                                                            |\n| ---------------------------------------------------------------------------------------- |\n| An error if the tree node data cannot be converted to a string using `JSON.stringify()`. |\n\n---\n\n#### clone\n\n```ts\nclone(): TreeNode\n```\n\nReturns a deep clone of the tree node, including all children. Parents, if any, are not included.\n\nThis is accomplished by stringifying the tree node\'s `toObject()` value, and then parsing the resulting JSON string to create an entirely new tree node.\nAs such, all data in the tree node must support `JSON.stringify()` or an error will be thrown.\n\n| Returns                                                |\n| ------------------------------------------------------ |\n| A deep clone of the tree node, including all children. |\n\n| Errors Thrown                                          |\n| ------------------------------------------------------ |\n| An error if `JSON.stringify()` fails on the tree node. |\n\n### Static Functions\n\n#### fromJSON\n\n```ts\nTreeNode.fromJSON(dataString: string, options: TreeNodeOptions = TreeNode.defaultTreeNodeOptions): TreeNode\n```\n\nParses the provided data string, which contains an object with nested children, and creates a tree node from the resulting parsed object.\n\nJSON example:\n\n```json\n{\n  "id": 1,\n  "children": [{ "id": 2 }, { "id": 3, "children": [{ "id": 4 }, { "id": 5 }] }]\n}\n```\n\n| Param        | Description                                                     |\n| ------------ | --------------------------------------------------------------- |\n| `dataString` | The JSON data string containing an object with nested children. |\n| `options`    | Optional. The options for the TreeNode.                         |\n\n| Returns                                      |\n| -------------------------------------------- |\n| A TreeNode constructed from the parsed JSON. |\n\n| Errors Thrown                   |\n| ------------------------------- |\n| An error if JSON parsing fails. |\n\n---\n\n\x3c!-- [lock:typescript] 🚫--------------------------------------- --\x3e\n\n## TypeScript\n\nType definitions have been included for [TypeScript](https://www.typescriptlang.org/) support.\n\n\x3c!-- [/lock:typescript] ---------------------------------------🚫 --\x3e\n\n\x3c!-- [lock:icon] 🚫--------------------------------------- --\x3e\n\n## Icon Attribution\n\nFavicon by [Twemoji](https://github.com/twitter/twemoji).\n\n\x3c!-- [/lock:icon] ---------------------------------------🚫 --\x3e\n\n\x3c!-- [lock:contributing] 🚫--------------------------------------- --\x3e\n\n## Contributing\n\nOpen source software is awesome and so are you. 😎\n\nFeel free to submit a pull request for bugs or additions, and make sure to update tests as appropriate. If you find a mistake in the docs, send a PR! Even the smallest changes help.\n\nFor major changes, open an issue first to discuss what you\'d like to change.\n\n\x3c!-- [/lock:contributing] --------------------------------------🚫 --\x3e\n\n## ⭐ Found It Helpful? [Star It!](https://github.com/justinmahar/versatile-tree/stargazers)\n\nIf you found this project helpful, let the community know by giving it a [star](https://github.com/justinmahar/versatile-tree/stargazers): [👉⭐](https://github.com/justinmahar/versatile-tree/stargazers)\n\n\x3c!-- [lock:support] 🚫--------------------------------------- --\x3e\nWant to support the project? Feel free to grab me a coffee, which is my main source of fuel for development:\n\n<a href="https://paypal.me/thejustinmahar/5"><img src="https://justinmahar.github.io/react-kindling/support/coffee-1.png" alt="Buy me a coffee" height="35" /></a>&nbsp; <a href="https://paypal.me/thejustinmahar/15"><img src="https://justinmahar.github.io/react-kindling/support/coffee-3.png" alt="Buy me 3 coffees" height="35" /></a>&nbsp; <a href="https://paypal.me/thejustinmahar/25"><img src="https://justinmahar.github.io/react-kindling/support/coffee-5.png" alt="Buy me 5 coffees" height="35" /></a>\n\n\x3c!-- [/lock:support] ---------------------------------------🚫 --\x3e\n\n## License\n\nSee [LICENSE.md](https://justinmahar.github.io/versatile-tree/?path=/docs/license--docs).';var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _createMdxContent(props){return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.Qb,{title:"Home"}),"\n",(0,jsx_runtime.jsx)(blocks_dist.Ih,{children:READMEraw_namespaceObject})]})}const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Home",tags:["stories-mdx"],includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.MN)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent()}};const _1_README_stories=componentMeta,__namedExportsOrder=["__page"]},"./node_modules/memoizerific sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/memoizerific sync recursive",module.exports=webpackEmptyContext},"./node_modules/react/cjs/react-jsx-runtime.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";var f=__webpack_require__("./node_modules/react/index.js"),k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};function q(c,a,g){var b,d={},e=null,h=null;for(b in void 0!==g&&(e=""+g),void 0!==a.key&&(e=""+a.key),void 0!==a.ref&&(h=a.ref),a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l,exports.jsx=q,exports.jsxs=q},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.min.js")}}]);